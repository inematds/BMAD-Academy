// Base de conhecimento do BMad
const knowledgeBase = {
    // Informa√ß√µes gerais
    about: {
        keywords: ['o que √©', 'que √©', 'defini√ß√£o', 'sobre', 'bmad', 'explicar'],
        answer: `O BMad Method √© um framework universal de agentes de IA que permite qualquer pessoa criar solu√ß√µes complexas sem precisar ser programador. √â como ter uma equipe completa de especialistas (desenvolvedores, designers, gerentes) trabalhando para voc√™ atrav√©s de comandos simples.`
    },

    // Instala√ß√£o
    install: {
        keywords: ['instalar', 'instala√ß√£o', 'como instalar', 'setup', 'come√ßar'],
        answer: `Para instalar o BMad:

1. Verifique se tem Node.js: node --version
2. Execute: npx bmad-method status
3. Instale no projeto: npx bmad-method install
4. Siga as instru√ß√µes para selecionar os agentes

O instalador √© interativo e deve ser executado manualmente no terminal.`
    },

    // Comandos
    commands: {
        keywords: ['comandos', 'comando', 'como usar', 'usage', 'sintaxe'],
        answer: `Comandos principais do BMad:

‚Ä¢ npx bmad-method status - Ver instala√ß√£o
‚Ä¢ npx bmad-method list:agents - Listar agentes
‚Ä¢ npx bmad-method list:expansions - Ver pacotes
‚Ä¢ npx bmad-method update - Atualizar
‚Ä¢ npx bmad-method help - Ajuda

Para usar agentes na IDE:
"As dev, implemente uma fun√ß√£o de login"
"As ux-expert, crie um mockup de dashboard"`
    },

    // Agentes principais
    agents: {
        keywords: ['agentes', 'agente', 'quais agentes', 'especialistas', 'roles'],
        answer: `Agentes principais do BMad:

üöÄ dev - Desenvolvedor Full Stack
Usar para: criar c√≥digo, corrigir bugs, implementar features

üé® ux-expert - Designer UX/UI
Usar para: interfaces, wireframes, experi√™ncia do usu√°rio

üìã pm - Gerente de Produto
Usar para: PRDs, estrat√©gia, planejamento de features

üèóÔ∏è architect - Arquiteto de Software
Usar para: design de sistema, arquitetura, escolha de tech

üîç analyst - Analista de Neg√≥cios
Usar para: pesquisa, an√°lise competitiva, brainstorming

üß™ qa - Especialista em Testes
Usar para: testes, qualidade, revis√£o de c√≥digo`
    },

    // Agente espec√≠fico - dev
    agent_dev: {
        keywords: ['dev', 'desenvolvedor', 'programar', 'c√≥digo'],
        answer: `Agente DEV (Desenvolvedor Full Stack)

Nome: dev
Quando usar: Implementa√ß√£o de c√≥digo, debugging, refatora√ß√£o, desenvolvimento

Exemplos de uso:
‚Ä¢ "As dev, crie uma fun√ß√£o que calcule juros compostos"
‚Ä¢ "As dev, corrija o bug na autentica√ß√£o"
‚Ä¢ "As dev, refatore este c√≥digo para melhor performance"
‚Ä¢ "As dev, adicione valida√ß√£o de formul√°rio"`
    },

    // Agente espec√≠fico - ux-expert
    agent_ux: {
        keywords: ['ux', 'designer', 'interface', 'ui', 'design'],
        answer: `Agente UX-EXPERT (Designer UX/UI)

Nome: Sally (ux-expert)
Quando usar: Design de interfaces, wireframes, prot√≥tipos, experi√™ncia do usu√°rio

Exemplos de uso:
‚Ä¢ "As ux-expert, desenhe uma tela de login moderna"
‚Ä¢ "As ux-expert, crie wireframes para dashboard"
‚Ä¢ "As ux-expert, melhore a UX do checkout"
‚Ä¢ "As ux-expert, sugira melhorias de acessibilidade"`
    },

    // Agente espec√≠fico - pm
    agent_pm: {
        keywords: ['pm', 'product manager', 'gerente', 'prd'],
        answer: `Agente PM (Gerente de Produto)

Nome: pm
Quando usar: Cria√ß√£o de PRDs, estrat√©gia de produto, prioriza√ß√£o, planejamento

Exemplos de uso:
‚Ä¢ "As pm, crie um PRD para um app de delivery"
‚Ä¢ "As pm, defina a estrat√©gia para o pr√≥ximo trimestre"
‚Ä¢ "As pm, priorize estas features"
‚Ä¢ "As pm, crie crit√©rios de aceita√ß√£o para esta hist√≥ria"`
    },

    // Primeiro projeto
    first_project: {
        keywords: ['primeiro projeto', 'come√ßar projeto', 'criar projeto', 'exemplo pr√°tico'],
        answer: `Para criar seu primeiro projeto com BMad:

1. Planejar: "As analyst, defina requisitos de um sistema de agendamento"
2. PRD: "As pm, crie um PRD baseado nos requisitos"
3. Arquitetura: "As architect, defina a arquitetura t√©cnica"
4. Design: "As ux-expert, crie wireframes das telas"
5. Implementar: "As dev, implemente a funcionalidade"

Dica: Trabalhe por etapas, use o agente certo para cada tarefa!`
    },

    // Casos de uso
    use_cases: {
        keywords: ['casos de uso', 'exemplos', 'usar para', 'aplica√ß√µes', 'profiss√£o'],
        answer: `Casos de uso por profiss√£o:

üë®‚Äç‚öñÔ∏è Advogados:
‚Ä¢ Sistema de gest√£o de processos
‚Ä¢ An√°lise autom√°tica de contratos
‚Ä¢ Calculadora de honor√°rios

üë®‚Äç‚öïÔ∏è M√©dicos:
‚Ä¢ Prontu√°rio eletr√¥nico
‚Ä¢ Agendamento de consultas
‚Ä¢ Portal do paciente

üë®‚Äçüè´ Professores:
‚Ä¢ Plataforma de exerc√≠cios
‚Ä¢ Sistema de corre√ß√£o autom√°tica
‚Ä¢ Gerador de provas

üíº Empreendedores:
‚Ä¢ Landing pages
‚Ä¢ CRM simples
‚Ä¢ Dashboard de m√©tricas`
    },

    // Expans√µes
    expansions: {
        keywords: ['expans√µes', 'pacotes', 'expansion', 'extens√µes'],
        answer: `Pacotes de Expans√£o dispon√≠veis:

üì¶ bmad-2d-phaser-game-dev
Desenvolvimento de jogos 2D com Phaser

üì¶ bmad-infrastructure-devops
DevOps e Infraestrutura

üì¶ bmad-creative-writing
Escrita criativa e storytelling

üì¶ bmad-godot-game-dev
Desenvolvimento com Godot

Para ver todos: npx bmad-method list:expansions`
    },

    // Vers√£o
    version: {
        keywords: ['vers√£o', 'version', 'atualizar', 'update'],
        answer: `A vers√£o atual do BMad mostrada nesta academy √© 4.44.1.

Para verificar sua vers√£o:
npx bmad-method status

Para atualizar:
npx bmad-method update

Para verificar se h√° atualiza√ß√µes:
npx bmad-method update-check`
    },

    // Ajuda geral
    help: {
        keywords: ['ajuda', 'help', 'socorro', 'n√£o sei', 'd√∫vida'],
        answer: `Como posso te ajudar?

Voc√™ pode perguntar sobre:
‚Ä¢ O que √© o BMad
‚Ä¢ Como instalar
‚Ä¢ Quais s√£o os agentes
‚Ä¢ Como criar um projeto
‚Ä¢ Comandos dispon√≠veis
‚Ä¢ Casos de uso pr√°ticos
‚Ä¢ Pacotes de expans√£o

Ou navegue pelo tutorial para aprender passo a passo!`
    },

    // IDEs suportadas
    ides: {
        keywords: ['ide', 'editor', 'cursor', 'vscode', 'code', 'copilot'],
        answer: `IDEs suportadas pelo BMad:

‚Ä¢ Claude Code (VS Code + Claude) - Sintaxe: /agente
‚Ä¢ Cursor - Sintaxe: @agente
‚Ä¢ VS Code + Copilot - Sintaxe: @agente
‚Ä¢ Windsurf (Codeium) - Sintaxe: @agente
‚Ä¢ Gemini (Google AI Studio)
‚Ä¢ OpenCode (via opencode.jsonc)
‚Ä¢ Codex CLI (Terminal)
‚Ä¢ Codex Web (GitHub Web via AGENTS.md)

A sintaxe varia por IDE:
- / (slash) ‚Üí Claude Code
- @ (arroba) ‚Üí Cursor, VS Code, Windsurf
- "As agente," ‚Üí Linguagem natural (funciona em todas)

O BMad se integra com estas IDEs atrav√©s de arquivos de configura√ß√£o na pasta .bmad-core do seu projeto.`
    },

    // QA Avan√ßado (Test Architect)
    qa_advanced: {
        keywords: ['qa avan√ßado', 'test architect', 'quality gate', 'risk', '*risk', '*design', 'test strategy'],
        answer: `QA Test Architect - Comandos Avan√ßados:

O agente QA do BMad √© um Test Architect profissional, n√£o apenas um revisor de c√≥digo.

COMANDOS PRINCIPAIS:
‚Ä¢ *risk      - An√°lise de riscos (antes de desenvolver)
‚Ä¢ *design    - Criar estrat√©gia de testes
‚Ä¢ *trace     - Verificar cobertura de requisitos
‚Ä¢ *nfr       - Validar NFRs (Security, Performance, etc)
‚Ä¢ *review    - Revis√£o completa + refactoring
‚Ä¢ *gate      - Quality Gate decision (PASS/FAIL/CONCERNS)

QUANDO USAR:
- *risk e *design ‚Üí ANTES de codificar (planning)
- *trace e *nfr ‚Üí DURANTE desenvolvimento (checkpoints)
- *review e *gate ‚Üí DEPOIS de implementar (review)

SINTAXE:
@qa *risk docs/stories/epic1.story1-login.md
@qa *design docs/stories/epic1.story1-login.md
@qa *review docs/stories/epic1.story1-login.md

QUALITY GATES:
- PASS: Tudo ok, pode continuar
- CONCERNS: Issues n√£o-cr√≠ticos, revisar
- FAIL: Issues cr√≠ticos, corrigir antes
- WAIVED: Aceito com justificativa`
    },

    // Workflow completo
    workflow: {
        keywords: ['workflow', 'fluxo', 'processo', 'como funciona', 'ordem certa'],
        answer: `Workflow Completo do BMad Method:

FASE 1: PLANNING (Web UI recomendado)
1. @analyst - Research e requisitos
2. @pm - Criar PRD (Product Requirements Document)
3. @architect - Definir arquitetura t√©cnica
4. @ux-expert - (Opcional) Front-end spec
5. @po - Validar documentos

FASE 2: SHARDING (IDE)
6. @po shard PRD - Dividir em √©picos/stories
7. @po shard Architecture - Dividir arquitetura

FASE 3: DEVELOPMENT (IDE)
8. @sm - Draftar pr√≥xima story do √©pico
9. @qa *risk - Avaliar riscos da story
10. @qa *design - Criar estrat√©gia de testes
11. @dev *develop-story - Implementar
12. @qa *review - Revisar e criar quality gate
13. Commit c√≥digo
14. Repetir 8-13 at√© completar √©pico

PROJETOS PEQUENOS:
pm ‚Üí dev ‚Üí qa (simplificado)

PROJETOS M√âDIOS:
analyst ‚Üí pm ‚Üí architect ‚Üí ux-expert ‚Üí dev ‚Üí qa

PROJETOS GRANDES:
Workflow completo com SM, PO e QA gates`
    },

    // Sharding
    sharding: {
        keywords: ['sharding', 'shard', 'dividir', 'epics', 'stories', 'epic', 'story'],
        answer: `Sharding no BMad Method:

O QUE √â:
Sharding = dividir documentos grandes em peda√ßos menores

POR QU√ä:
- PRD e Architecture s√£o muito grandes
- Dev precisa de peda√ßos pequenos (stories)
- Cada story = 1 tarefa implement√°vel

COMO FUNCIONA:
1. PM cria PRD completo (docs/prd.md)
2. Architect cria Architecture (docs/architecture.md)
3. PO shard PRD ‚Üí docs/epics/*.md
4. PO shard Architecture ‚Üí docs/architecture/*.md
5. SM pega 1 √©pico ‚Üí cria stories (docs/stories/*.md)
6. Dev implementa 1 story por vez

COMANDO:
@po shard o PRD em √©picos e stories
@po shard a arquitetura por m√≥dulos

ESTRUTURA GERADA:
docs/
  ‚îú‚îÄ‚îÄ prd.md (original)
  ‚îú‚îÄ‚îÄ architecture.md (original)
  ‚îú‚îÄ‚îÄ epics/
  ‚îÇ   ‚îú‚îÄ‚îÄ epic1-authentication.md
  ‚îÇ   ‚îî‚îÄ‚îÄ epic2-user-management.md
  ‚îî‚îÄ‚îÄ stories/
      ‚îú‚îÄ‚îÄ epic1.story1-login.md
      ‚îî‚îÄ‚îÄ epic1.story2-register.md`
    },

    // SM e PO
    sm_po: {
        keywords: ['sm', 'scrum master', 'po', 'product owner', 'stories', 'sprint'],
        answer: `SM (Scrum Master) e PO (Product Owner):

SCRUM MASTER (SM):
‚Ä¢ Gerencia stories e sprints
‚Ä¢ Pega √©picos e cria stories detalhadas
‚Ä¢ Divide stories em tasks
‚Ä¢ Organiza desenvolvimento iterativo

Quando usar:
@sm crie stories para o pr√≥ximo sprint baseado neste √©pico
@sm draft a pr√≥xima story do √©pico de autentica√ß√£o

PRODUCT OWNER (PO):
‚Ä¢ Valida documentos (PRD vs Architecture)
‚Ä¢ Faz sharding (divide docs grandes)
‚Ä¢ Garante alinhamento entre planejamento e implementa√ß√£o

Quando usar:
@po valide o PRD contra a arquitetura
@po shard o PRD em √©picos e stories
@po shard a arquitetura por m√≥dulos

WORKFLOW:
Planning ‚Üí PO valida ‚Üí PO shard ‚Üí SM cria stories ‚Üí Dev implementa`
    },

    // Quality Gates
    quality_gates: {
        keywords: ['quality gate', 'gate', 'pass', 'fail', 'concerns', 'waived'],
        answer: `Quality Gates no BMad:

O QUE S√ÉO:
Decis√µes de qualidade que o QA faz ap√≥s revisar c√≥digo

STATUS POSS√çVEIS:
‚Ä¢ PASS - Tudo ok, pode prosseguir
‚Ä¢ CONCERNS - Issues n√£o-cr√≠ticos encontrados
‚Ä¢ FAIL - Issues cr√≠ticos, precisa corrigir
‚Ä¢ WAIVED - Issues aceitos com justificativa

QUANDO √â CRIADO:
Ap√≥s @qa *review da story implementada

ONDE FICA:
docs/qa/gates/{epic}.{story}-{slug}.yml

EXEMPLO:
Status: PASS
Risk Level: LOW
Test Coverage: 95%
P0 Tests: 8/8 passing

COMO USAR:
1. Dev marca story "Ready for Review"
2. @qa *review {story} - QA analisa tudo
3. QA cria quality gate com decis√£o
4. Se FAIL ‚Üí Dev corrige ‚Üí @qa *gate atualiza
5. Se PASS ‚Üí Story done ‚Üí pr√≥xima story`
    }
};

// Fun√ß√£o para buscar resposta na base de conhecimento
function findAnswer(question) {
    const questionLower = question.toLowerCase().trim();

    // Buscar correspond√™ncia nas keywords
    for (const [key, data] of Object.entries(knowledgeBase)) {
        for (const keyword of data.keywords) {
            if (questionLower.includes(keyword)) {
                return data.answer;
            }
        }
    }

    // Resposta padr√£o se n√£o encontrar
    return `Desculpe, n√£o encontrei uma resposta espec√≠fica para isso.

Tente perguntar sobre:
‚Ä¢ O que √© o BMad
‚Ä¢ Como instalar
‚Ä¢ Quais agentes existem
‚Ä¢ Como criar um projeto
‚Ä¢ Comandos dispon√≠veis

Ou explore o Tutorial para aprender mais!`;
}
